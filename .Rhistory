getOptionChain("VTI", "2018")
test <- getOptionChain("VTI", "2018")
test[[1]]
test[[1]]$puts$OI
test[[1]]$puts
test <- OptionChain(VTI)
callSpread(VTI)
test <- OptionChain("VTI")
test <- OptionChain(VTI)
test
callSpread(VTI)
callSpread(test)
# R Script to get financial data from yahoo and google APIs
# Libraries ---------------------------------------------------------------
require(quantmod)
# Get Stock Info ----------------------------------------------------------
getSymbols(c("VTI",
"T"), from=as.Date("18-01-01", format="%y-%m-%d"))
# Options Info ------------------------------------------------------------
# Turning it into a function
OptionChain <- function(stockTickerDF, thePeriod=1){
# get ticker name
stockTicker <- deparse(substitute(stockTickerDF))
# Getting historical options prices
HistoricalOptionPriceDF <- stockTickerDF[options.expiry(stockTickerDF),]
# Get All Option Chains
theOptionChain <- getOptionChain(stockTicker, "2018")
# Options Chain - Calls In the Money (NextOptions Expiry Date)
CallInTheMoney <- theOptionChain[[thePeriod]]$calls[theOptionChain[[thePeriod]]$calls$Strike <= getQuote(stockTicker)$Last,]
# Options Chain - Puts In The Money (NextOptions Expiry Date)
PutInTheMoney <- theOptionChain[[thePeriod]]$puts[theOptionChain[[thePeriod]]$puts$Strike >= getQuote(stockTicker)$Last,]
# Implementation of the Put/Call Ratio (Volume)
# Total vol sum of Call Option / Total vol sum of Put Option
# 1 = Neutral
# > 1 = Bearish
# < 1 = Bullish
VolPut <- sum(theOptionChain[[thePeriod]]$puts$Vol)
VolCall <- sum(theOptionChain[[thePeriod]]$calls$Vol)
PutToCallRatioVol <- VolPut/VolCall
# Implementation of the Put/Call Ratio (Open Interest)
# Total sum OI Call Option / Total sum OI Put Option
# 1 = Neutral
# > 1 = Bearish
# < 1 = Bullish
OIPut <- sum(theOptionChain[[thePeriod]]$puts$OI)
OICall <- sum(theOptionChain[[thePeriod]]$calls$OI)
PutToCallRatioOI <- OIPut/OICall
# Options Chain - Calls Out of the Money (NextOptions Expiry Date)
CallOutOfTheMoney <- theOptionChain[[thePeriod]]$calls[theOptionChain[[thePeriod]]$calls$Strike >= getQuote(stockTicker)$Last,]
# Options Chain - Puts Out of The Money (NextOptions Expiry Date)
PutOutOfTheMoney <- theOptionChain[[thePeriod]]$puts[theOptionChain[[thePeriod]]$puts$Strike <= getQuote(stockTicker)$Last,]
# Return the List
theList <- list("HistoricalOptionPriceDF" = HistoricalOptionPriceDF,
"theOptionChain" = theOptionChain,
"CallInTheMoney" = CallInTheMoney,
"PutInTheMoney" = PutInTheMoney,
"VolCall" = VolCall,
"VolPut" = VolPut,
"PutToCallRatioVol" = PutToCallRatioVol,
"OICall" = OICall,
"OIPut" = OIPut,
"PutToCallRatioOI" = PutToCallRatioOI,
"CallOutOfTheMoney" = CallOutOfTheMoney,
"PutOutOfTheMoney" = PutOutOfTheMoney)
return(theList)
}
# After running OptionChain function run this to get call spread with break @ the money
callSpread <- function(theOptionList){
print(theOptionList$CallInTheMoney)
print("------------------------------------------------------------")
print(theOptionList$CallOutOfTheMoney)
}
# After running OptionChain function run this to get put spread with break @ the money
putSpread <- function(theOptionList){
print(theOptionList$PutOutOfTheMoney)
print("------------------------------------------------------------")
print(theOptionList$PutInTheMoney)
}
theOptions <- OptionChain(T)
theOptions$theOptionChain
theOptions <- OptionChain(T, period=2)
theOptions <- OptionChain(T, thePeriod=2)
x11()
chartSeries(T)
addBBands()
addMACD()
addRSI()
addExpiry()
callSpread(theOptions)
theOptions$PutToCallRatioOI
putSpread(theOptions)
theOptions$PutToCallRatioVol
theOptions$PutToCallRatioOI
theOptions <- OptionChain(VTI)
x11()
chartSeries(VTI)
addBBands()
addMACD()
addRSI()
addExpiry()
theOptions$PutToCallRatioVol
theOptions$PutToCallRatioOI
theOptions$theOptionChain
callSpread(theOptions)
putSpread(theOptions)
theOptions$PutToCallRatioVol
theOptions$PutToCallRatioOI
callSpread(theOptions)
theOptions$PutToCallRatioVol
theOptions$PutToCallRatioOI
clear
theOptions <- optionsChain(T)
theOptions <- OptionChain(T)
x11()
chartSeries(T)
addBBands()
addMACD()
addRSI()
addExpiry()
theOptions$theOptionChain
theOptions <- OptionChain(T, thePeriod=2)
theOptions$PutToCallRatioVol
theOptions$PutToCallRatioOI
callSpread(theOptions)
putSpread(theOptions)
getSymbols("MRAM", from=as.Date("18-01-01", format="%y-%m-%d"))
theOptions <- OptionChain(MRAM)
OptionChain(T)
OptionChain(MRAM)
getSymbols("SO", from=as.Date("18-01-01", format="%y-%m-%d"))
theOption <- OptionChain(SO)
theOption$theOptionChain
theOption <- OptionChain(SO, thePeriod=2)
ckear
clear
clear
theOption$PutToCallRatioVol
theOption$PutToCallRatioOI
chartSeries(SO)
addBBands()
addMACD()
addRSI()
addExpiry()
callSpread(theOption)
putSpread(SO)
putSpread(theOption)
theOption$PutToCallRatioVol
theOption$PutToCallRatioOI
getSymbols("VZ", from=as.Date("18-01-01", format="%y-%m-%d"))
theOptions <- OptionChain(VZ)
theOptions$theOptionChain
theOptions <- OptionChain(VZ, thePeriod=2)
theOption$PutToCallRatioVol
theOption$PutToCallRatioOI
chartSeries(VZ)
addBBands()
addMACD()
addRSI()
addExpiry()
# R Script to get financial data from yahoo and google APIs
# Libraries ---------------------------------------------------------------
require(quantmod)
# Get Stock Info ----------------------------------------------------------
getSymbols(c("VTI",
"T"), from=as.Date("18-01-01", format="%y-%m-%d"))
# Options Info ------------------------------------------------------------
# Turning it into a function
OptionChain <- function(stockTickerDF, thePeriod=1){
# get ticker name
stockTicker <- deparse(substitute(stockTickerDF))
# Getting historical options prices
HistoricalOptionPriceDF <- stockTickerDF[options.expiry(stockTickerDF),]
# Get All Option Chains
theOptionChain <- getOptionChain(stockTicker, "2018")
# Options Chain - Calls In the Money (NextOptions Expiry Date)
CallInTheMoney <- theOptionChain[[thePeriod]]$calls[theOptionChain[[thePeriod]]$calls$Strike <= getQuote(stockTicker)$Last,]
# Options Chain - Puts In The Money (NextOptions Expiry Date)
PutInTheMoney <- theOptionChain[[thePeriod]]$puts[theOptionChain[[thePeriod]]$puts$Strike >= getQuote(stockTicker)$Last,]
# Implementation of the Put/Call Ratio (Volume)
# Total vol sum of Call Option / Total vol sum of Put Option
# 1 = Neutral
# > 1 = Bearish
# < 1 = Bullish
VolPut <- sum(theOptionChain[[thePeriod]]$puts$Vol)
VolCall <- sum(theOptionChain[[thePeriod]]$calls$Vol)
PutToCallRatioVol <- VolPut/VolCall
# Implementation of the Put/Call Ratio (Open Interest)
# Total sum OI Call Option / Total sum OI Put Option
# 1 = Neutral
# > 1 = Bearish
# < 1 = Bullish
OIPut <- sum(theOptionChain[[thePeriod]]$puts$OI)
OICall <- sum(theOptionChain[[thePeriod]]$calls$OI)
PutToCallRatioOI <- OIPut/OICall
# Options Chain - Calls Out of the Money (NextOptions Expiry Date)
CallOutOfTheMoney <- theOptionChain[[thePeriod]]$calls[theOptionChain[[thePeriod]]$calls$Strike >= getQuote(stockTicker)$Last,]
# Options Chain - Puts Out of The Money (NextOptions Expiry Date)
PutOutOfTheMoney <- theOptionChain[[thePeriod]]$puts[theOptionChain[[thePeriod]]$puts$Strike <= getQuote(stockTicker)$Last,]
# Return the List
theList <- list("HistoricalOptionPriceDF" = HistoricalOptionPriceDF,
"theOptionChain" = theOptionChain,
"CallInTheMoney" = CallInTheMoney,
"PutInTheMoney" = PutInTheMoney,
"VolCall" = VolCall,
"VolPut" = VolPut,
"PutToCallRatioVol" = PutToCallRatioVol,
"OICall" = OICall,
"OIPut" = OIPut,
"PutToCallRatioOI" = PutToCallRatioOI,
"CallOutOfTheMoney" = CallOutOfTheMoney,
"PutOutOfTheMoney" = PutOutOfTheMoney)
return(theList)
}
# After running OptionChain function run this to get call spread with break @ the money
callSpread <- function(theOptionList){
print(theOptionList$CallInTheMoney)
print("------------------------------------------------------------")
print(theOptionList$CallOutOfTheMoney)
}
# After running OptionChain function run this to get put spread with break @ the money
putSpread <- function(theOptionList){
print(theOptionList$PutOutOfTheMoney)
print("------------------------------------------------------------")
print(theOptionList$PutInTheMoney)
}
# Chart Series ------------------------------------------------------------
x11()
chartSeries(VTI)
addBBands()
addMACD()
addRSI()
addExpiry()
theOption <- OptionChain(VTI)
theOption$theOptionChain
theOption$PutToCallRatioVol
theOption$PutToCallRatioOI
# R Script to get financial data from yahoo and google APIs
# Libraries ---------------------------------------------------------------
require(quantmod)
# Get Stock Info ----------------------------------------------------------
getSymbols(c("VTI",
"T"), from=as.Date("18-01-01", format="%y-%m-%d"))
# Options Info ------------------------------------------------------------
# Turning it into a function
OptionChain <- function(stockTickerDF, thePeriod=1){
# get ticker name
stockTicker <- deparse(substitute(stockTickerDF))
# Getting historical options prices
HistoricalOptionPriceDF <- stockTickerDF[options.expiry(stockTickerDF),]
# Get All Option Chains
theOptionChain <- getOptionChain(stockTicker, "2018")
# Options Chain - Calls In the Money (NextOptions Expiry Date)
CallInTheMoney <- theOptionChain[[thePeriod]]$calls[theOptionChain[[thePeriod]]$calls$Strike <= getQuote(stockTicker)$Last,]
# Options Chain - Puts In The Money (NextOptions Expiry Date)
PutInTheMoney <- theOptionChain[[thePeriod]]$puts[theOptionChain[[thePeriod]]$puts$Strike >= getQuote(stockTicker)$Last,]
# Implementation of the Put/Call Ratio (Volume)
# Total vol sum of Call Option / Total vol sum of Put Option
# 1 = Neutral
# > 1 = Bearish
# < 1 = Bullish
VolPut <- sum(theOptionChain[[thePeriod]]$puts$Vol)
VolCall <- sum(theOptionChain[[thePeriod]]$calls$Vol)
PutToCallRatioVol <- VolPut/VolCall
# Implementation of the Put/Call Ratio (Open Interest)
# Total sum OI Call Option / Total sum OI Put Option
# 1 = Neutral
# > 1 = Bearish
# < 1 = Bullish
OIPut <- sum(theOptionChain[[thePeriod]]$puts$OI)
OICall <- sum(theOptionChain[[thePeriod]]$calls$OI)
PutToCallRatioOI <- OIPut/OICall
# Options Chain - Calls Out of the Money (NextOptions Expiry Date)
CallOutOfTheMoney <- theOptionChain[[thePeriod]]$calls[theOptionChain[[thePeriod]]$calls$Strike >= getQuote(stockTicker)$Last,]
# Options Chain - Puts Out of The Money (NextOptions Expiry Date)
PutOutOfTheMoney <- theOptionChain[[thePeriod]]$puts[theOptionChain[[thePeriod]]$puts$Strike <= getQuote(stockTicker)$Last,]
# Return the List
theList <- list("HistoricalOptionPriceDF" = HistoricalOptionPriceDF,
"theOptionChain" = theOptionChain,
"CallInTheMoney" = CallInTheMoney,
"PutInTheMoney" = PutInTheMoney,
"VolCall" = VolCall,
"VolPut" = VolPut,
"PutToCallRatioVol" = PutToCallRatioVol,
"OICall" = OICall,
"OIPut" = OIPut,
"PutToCallRatioOI" = PutToCallRatioOI,
"CallOutOfTheMoney" = CallOutOfTheMoney,
"PutOutOfTheMoney" = PutOutOfTheMoney)
return(theList)
}
# After running OptionChain function run this to get call spread with break @ the money
callSpread <- function(theOptionList){
print(theOptionList$CallInTheMoney)
print("------------------------------------------------------------")
print(theOptionList$CallOutOfTheMoney)
}
# After running OptionChain function run this to get put spread with break @ the money
putSpread <- function(theOptionList){
print(theOptionList$PutOutOfTheMoney)
print("------------------------------------------------------------")
print(theOptionList$PutInTheMoney)
}
x11()
chartSeries(VTI)
addBBands()
addMACD()
addRSI()
addExpiry()
test <- OptionChain(VTI)
test$PutToCallRatioVol
test$PutToCallRatioOI
callSpread(test)
putSpread(VTI)
putSpread(test)
require(quantmod)
getSymbols("T")
x11()
chartSeries(T)
zoomChart(T)
zooom()
addBBands()
addMACD()
addRSI()
addExpiry()
getSymbols(VTI)
getSymbols("VTI")
chartSeries(VTI)
zoomChart(VTI, yrange = from=as.Date("18-01-01", format="%y-%m-%d"))
zoomChart(VTI, from=as.Date("18-01-01", format="%y-%m-%d"))
zooom()
zooom()
zooom()
addBBands()
addMACD()
addRSI()
addExpiry()
require(quantmod)
getSymbols("VTI")
x11()
chartSeries(VTI)
getSymbols(c("VTI",
"T"), from=as.Date("18-01-01", format="%y-%m-%d"))
chartSeries(VTI)
addBBands()
addMACD()
addRSI()
allReturns(VTI)
test <- allReturns(VTI)
View(`T`)
View(test)
View(VTI)
# R Script to get financial data from yahoo and google APIs
# Libraries ---------------------------------------------------------------
require(quantmod)
# Get Stock Info ----------------------------------------------------------
getSymbols(c("VTI",
"T"), from=as.Date("18-01-01", format="%y-%m-%d"))
x11()
chartSeries(VTI)
addBBands()
addMACD()
addRSI()
?quantmod
allReturns(VTI)
test <- allReturns(VTI)
View(test)
View(VTI)
x11()
chartSeries(T)
addBBands()
addMACD()
addRSI()
require(quantmod)
getSymbols(c("VTI",
"T"), from=as.Date("18-01-01", format="%y-%m-%d"))
View(VTI)
View(`T`)
?quantmod
View(VTI)
BBands(VTI.Adjusted)
BBands(VTI$VTI.Adjusted)
require(neuralnet)
BBands(VTI)
BBands(VTI$VTI.Adjusted)
x11()
chartSeries(VTI)
addBBands()
VTI$VTI.PercentBB <- BBands(VTI$VTI.Close)
RSI(VTI$VTI.Close)
MACD(VTI$VTI.Close)
install.packages(c("backports", "BH", "bindr", "bindrcpp", "broom", "caret", "caTools", "cli", "cluster", "curl", "CVST", "data.table", "ddalpha", "DiagrammeR", "digest", "dimRed", "doParallel", "dplyr", "e1071", "evaluate", "foreign", "gbm", "ggplot2", "glue", "highr", "hms", "htmlwidgets", "httr", "igraph", "ipred", "iterators", "jsonlite", "kernlab", "knitr", "lattice", "lava", "lubridate", "markdown", "MASS", "Matrix", "mgcv", "mime", "ModelMetrics", "munsell", "nlme", "PerformanceAnalytics", "pillar", "pkgconfig", "plogr", "prodlim", "psych", "purrr", "quantmod", "R6", "Rcpp", "RcppRoll", "RCurl", "readr", "recipes", "rlang", "rmarkdown", "robustbase", "rpart", "rpart.plot", "rstudioapi", "scales", "selectr", "sfsmisc", "stringi", "stringr", "survival", "tidyr", "tidyselect", "timeDate", "TTR", "utf8", "viridis", "visNetwork", "withr", "xgboost", "XML", "xts", "yaml", "zoo"))
source('~/workspace/Fchang012/NerualNet_Exploration/Main_NeuralNet.R')
source('~/workspace/Fchang012/NerualNet_Exploration/Main_NeuralNet.R')
for (i in 1:length(list.files("./Stock_Data/", pattern = ".rds$"))){
inputFileString <- paste("./Stock_Data/", list.files("./Stock_Data/", pattern = ".rds$")[i], sep = "")
assign(unlist(strsplit(list.files("./Stock_Data/", pattern = ".rds$")[i], "\\."))[1], readRDS(inputFileString))
}
# Setting Up Data With Technical Indicators -------------------------------
addTechnicalIndicators <- function(stockInfo){
stockInfo$rsi <- RSI(stockInfo[,4])
stockInfo$pctB <- BBands(stockInfo[,4])
stockInfo$signal <- MACD(stockInfo[,4])
stockInfo$daily.returns <- dailyReturn(stockInfo[,4])
# Classify daily return -
# 0 = x < 0.0
# 1 = x = 0
# 2 = x > 0.0
stockInfo$daily.returns.classified <- 0.0
stockInfo$daily.returns.classified[stockInfo$daily.returns >= 0.0, ] <- 1.0
# Remove Adjusted
stockInfo <- stockInfo[,-6]
return(stockInfo)
}
View(VTI)
chartSeries(VTI)
VTI <- addTechnicalIndicators(VTI)
VTI <- VTI[34:length(VTI$VTI.Close),]
names(VTI)
View(VTI)
for (i in 1:length(list.files("./Stock_Data/", pattern = ".rds$"))){
inputFileString <- paste("./Stock_Data/", list.files("./Stock_Data/", pattern = ".rds$")[i], sep = "")
assign(unlist(strsplit(list.files("./Stock_Data/", pattern = ".rds$")[i], "\\."))[1], readRDS(inputFileString))
}
names(VTI)
addTechnicalIndicators <- function(stockInfo){
stockInfo$rsi <- RSI(stockInfo[,4])
stockInfo$pctB <- BBands(stockInfo[,4])
stockInfo$signal <- MACD(stockInfo[,4])
stockInfo$daily.returns <- dailyReturn(stockInfo[,4])
# Classify daily return -
# 0 = x < 0.0
# 1 = x = 0
# 2 = x > 0.0
stockInfo$daily.returns.classified <- 0.0
stockInfo$daily.returns.classified[stockInfo$daily.returns >= 0.0, ] <- 1.0
# Remove Adjusted, High, Low
stockInfo <- stockInfo[,-c(2,3,6)]
return(stockInfo)
}
VTI <- addTechnicalIndicators(VTI)
names(vti)
names(VTI)
VTI <- VTI[34:length(VTI$VTI.Close),]
for (i in 1:length(list.files("./Stock_Data/", pattern = ".rds$"))){
inputFileString <- paste("./Stock_Data/", list.files("./Stock_Data/", pattern = ".rds$")[i], sep = "")
assign(unlist(strsplit(list.files("./Stock_Data/", pattern = ".rds$")[i], "\\."))[1], readRDS(inputFileString))
}
addTechnicalIndicators <- function(stockInfo){
stockInfo$rsi <- RSI(stockInfo[,4])
stockInfo$pctB <- BBands(stockInfo[,4])
stockInfo$signal <- MACD(stockInfo[,4])
stockInfo$daily.returns <- dailyReturn(stockInfo[,4])
# Classify daily return -
# 0 = x < 0.0
# 1 = x = 0
# 2 = x > 0.0
stockInfo$daily.returns.classified <- 0.0
stockInfo$daily.returns.classified[stockInfo$daily.returns >= 0.0, ] <- 1.0
# Remove Adjusted, High, Low
stockInfo <- stockInfo[,-c(2,3,6)]
return(stockInfo)
}
VTI <- addTechnicalIndicators(VTI)
VTI <- VTI[34:length(VTI$VTI.Close),]
TechnicalIndicators <- as.data.frame(VTI[,1:10])
TheDailyReturns <- as.data.frame(VTI[,11:12])
TheDailyReturns$daily.returns.classified.shifted <- shift(TheDailyReturns$daily.returns.classified, type = 'lead')
TheDailyReturns <- cbind(TheDailyReturns,
class.ind(as.factor(TheDailyReturns$daily.returns.classified.shifted))
)
names(TheDailyReturns) <- c(names(TheDailyReturns)[1:3],"Loss","Gain")
names(TheDailyReturns)
head(TheDailyReturns)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
maxminDF <- as.data.frame(lapply(TechnicalIndicators, normalize))
maxminDF$'Loss' <- TheDailyReturns$`Loss`
maxminDF$'Gain' <- TheDailyReturns$`Gain`
View(maxminDF)
TrainTestDataSplit <- function(TheDF){
trainLength <- round(length(TheDF[,1])*0.8)
TrainDF <- TheDF[1:trainLength,]
TestDF <- TheDF[(trainLength+1):length(TheDF[,1]),]
return(list(TrainDF,TestDF))
}
trainset <- TrainTestDataSplit(maxminDF)[[1]]
testset <- TrainTestDataSplit(maxminDF)[[2]]
View(trainset)
softplus <- function(x) {log(1+exp(x))}
names(trainset)
nn <- neuralnet(theFormula, data = trainset, hidden = c(2), linear.output = FALSE, lifesign = 'full', rep = 5, threshold = 0.01, learningrate = 0.0001, act.fct = softplus, err.fct = 'sse', stepmax = 100000)
theFormula <- paste(paste(colnames(trainset)[11:12], collapse = " + "), " ~ ", paste(colnames(trainset)[1:10], collapse = " + "))
nn <- neuralnet(theFormula, data = trainset, hidden = c(2), linear.output = FALSE, lifesign = 'full', rep = 5, threshold = 0.01, learningrate = 0.0001, act.fct = softplus, err.fct = 'sse', stepmax = 100000)
plot(nn)
Prediction_And_Accuracy <- function(nn, dataset){
# Compute predictions
pr.nn <- compute(nn, dataset[,1:12])
# Extract results
pr.nn.results <- pr.nn$net.result
# Accuracy (training set)
original_values <- max.col(dataset[, 13:14])
pr.nn.results_2 <- max.col(pr.nn.results)
accuracy <- mean(pr.nn.results_2 == original_values)
ConfusionMatrix <- table(original_values, pr.nn.results_2)
return(list(pr.nn.results,
original_values,
pr.nn.results_2,
accuracy,
ConfusionMatrix))
}
plot(nn)
