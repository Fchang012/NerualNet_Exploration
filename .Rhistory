addBBands()
addMACD()
addRSI()
require(quantmod)
getSymbols("VTI")
getSymbols("T")
getFinancials(T)
getFinancials("T")
getFinancials("T")
chartSeries(VTI)
x11()
chartSeries(VTI)
zoomChart(subet="2018-01::")
zoomChart(subset="2018-01::")
addBBands()
addRSI()
addMACD()
chartSeries(T)
zoomChart(subset="2018-01::")
addBBands()
addRSI()
addMACD()
getSymbols("SO")
chartSeries(SO)
zoomChart("2018-01::")
addBBands()
addRSI()
addMACD()
getSymbols("SPY")
chartSeries(SPY)
zoomChart(subset="2018-01::")
addBBands()
addRSI()
addMACD()
date
?date
date()
# R Script to get financial data from yahoo and google APIs
# Libraries ---------------------------------------------------------------
require(quantmod)
# Get Stock Info ----------------------------------------------------------
getSymbols(c("VTI",
"T"), from=as.Date("18-01-01", format="%y-%m-%d"))
# Options Info ------------------------------------------------------------
# Turning it into a function
OptionChain <- function(stockTickerDF, thePeriod=1){
# get ticker name
stockTicker <- deparse(substitute(stockTickerDF))
# Getting historical options prices
HistoricalOptionPriceDF <- stockTickerDF[options.expiry(stockTickerDF),]
# Get All Option Chains
theOptionChain <- getOptionChain(stockTicker, "2018")
# Options Chain - Calls In the Money (NextOptions Expiry Date)
CallInTheMoney <- theOptionChain[[thePeriod]]$calls[theOptionChain[[thePeriod]]$calls$Strike <= getQuote(stockTicker)$Last,]
# Options Chain - Puts In The Money (NextOptions Expiry Date)
PutInTheMoney <- theOptionChain[[thePeriod]]$puts[theOptionChain[[thePeriod]]$puts$Strike >= getQuote(stockTicker)$Last,]
# Implementation of the Put/Call Ratio (Volume)
# Total vol sum of Call Option / Total vol sum of Put Option
# 1 = Neutral
# > 1 = Bearish
# < 1 = Bullish
VolPut <- sum(theOptionChain[[thePeriod]]$puts$Vol)
VolCall <- sum(theOptionChain[[thePeriod]]$calls$Vol)
PutToCallRatioVol <- VolPut/VolCall
# Implementation of the Put/Call Ratio (Open Interest)
# Total sum OI Call Option / Total sum OI Put Option
# 1 = Neutral
# > 1 = Bearish
# < 1 = Bullish
OIPut <- sum(theOptionChain[[thePeriod]]$puts$OI)
OICall <- sum(theOptionChain[[thePeriod]]$calls$OI)
PutToCallRatioOI <- OIPut/OICall
# Options Chain - Calls Out of the Money (NextOptions Expiry Date)
CallOutOfTheMoney <- theOptionChain[[thePeriod]]$calls[theOptionChain[[thePeriod]]$calls$Strike >= getQuote(stockTicker)$Last,]
# Options Chain - Puts Out of The Money (NextOptions Expiry Date)
PutOutOfTheMoney <- theOptionChain[[thePeriod]]$puts[theOptionChain[[thePeriod]]$puts$Strike <= getQuote(stockTicker)$Last,]
# Return the List
theList <- list("HistoricalOptionPriceDF" = HistoricalOptionPriceDF,
"theOptionChain" = theOptionChain,
"CallInTheMoney" = CallInTheMoney,
"PutInTheMoney" = PutInTheMoney,
"VolCall" = VolCall,
"VolPut" = VolPut,
"PutToCallRatioVol" = PutToCallRatioVol,
"OICall" = OICall,
"OIPut" = OIPut,
"PutToCallRatioOI" = PutToCallRatioOI,
"CallOutOfTheMoney" = CallOutOfTheMoney,
"PutOutOfTheMoney" = PutOutOfTheMoney)
return(theList)
}
# After running OptionChain function run this to get call spread with break @ the money
callSpread <- function(theOptionList){
print(theOptionList$CallInTheMoney)
print("------------------------------------------------------------")
print(theOptionList$CallOutOfTheMoney)
}
# After running OptionChain function run this to get put spread with break @ the money
putSpread <- function(theOptionList){
print(theOptionList$PutOutOfTheMoney)
print("------------------------------------------------------------")
print(theOptionList$PutInTheMoney)
}
x11()
chartSeries(VTI)
addBBands()
addMACD()
addRSI()
addExpiry()
test <- OptionChain(VTI)
test$theOptionChain
test$PutToCallRatioOI
test[[1]]
test$PutToCallRatioOI
getOptionChain(VTI, "2018")
getOptionChain("VTI", "2018")
test <- getOptionChain("VTI", "2018")
test[[1]]
test[[1]]$puts$OI
test[[1]]$puts
test <- OptionChain(VTI)
callSpread(VTI)
test <- OptionChain("VTI")
test <- OptionChain(VTI)
test
callSpread(VTI)
callSpread(test)
# R Script to get financial data from yahoo and google APIs
# Libraries ---------------------------------------------------------------
require(quantmod)
# Get Stock Info ----------------------------------------------------------
getSymbols(c("VTI",
"T"), from=as.Date("18-01-01", format="%y-%m-%d"))
# Options Info ------------------------------------------------------------
# Turning it into a function
OptionChain <- function(stockTickerDF, thePeriod=1){
# get ticker name
stockTicker <- deparse(substitute(stockTickerDF))
# Getting historical options prices
HistoricalOptionPriceDF <- stockTickerDF[options.expiry(stockTickerDF),]
# Get All Option Chains
theOptionChain <- getOptionChain(stockTicker, "2018")
# Options Chain - Calls In the Money (NextOptions Expiry Date)
CallInTheMoney <- theOptionChain[[thePeriod]]$calls[theOptionChain[[thePeriod]]$calls$Strike <= getQuote(stockTicker)$Last,]
# Options Chain - Puts In The Money (NextOptions Expiry Date)
PutInTheMoney <- theOptionChain[[thePeriod]]$puts[theOptionChain[[thePeriod]]$puts$Strike >= getQuote(stockTicker)$Last,]
# Implementation of the Put/Call Ratio (Volume)
# Total vol sum of Call Option / Total vol sum of Put Option
# 1 = Neutral
# > 1 = Bearish
# < 1 = Bullish
VolPut <- sum(theOptionChain[[thePeriod]]$puts$Vol)
VolCall <- sum(theOptionChain[[thePeriod]]$calls$Vol)
PutToCallRatioVol <- VolPut/VolCall
# Implementation of the Put/Call Ratio (Open Interest)
# Total sum OI Call Option / Total sum OI Put Option
# 1 = Neutral
# > 1 = Bearish
# < 1 = Bullish
OIPut <- sum(theOptionChain[[thePeriod]]$puts$OI)
OICall <- sum(theOptionChain[[thePeriod]]$calls$OI)
PutToCallRatioOI <- OIPut/OICall
# Options Chain - Calls Out of the Money (NextOptions Expiry Date)
CallOutOfTheMoney <- theOptionChain[[thePeriod]]$calls[theOptionChain[[thePeriod]]$calls$Strike >= getQuote(stockTicker)$Last,]
# Options Chain - Puts Out of The Money (NextOptions Expiry Date)
PutOutOfTheMoney <- theOptionChain[[thePeriod]]$puts[theOptionChain[[thePeriod]]$puts$Strike <= getQuote(stockTicker)$Last,]
# Return the List
theList <- list("HistoricalOptionPriceDF" = HistoricalOptionPriceDF,
"theOptionChain" = theOptionChain,
"CallInTheMoney" = CallInTheMoney,
"PutInTheMoney" = PutInTheMoney,
"VolCall" = VolCall,
"VolPut" = VolPut,
"PutToCallRatioVol" = PutToCallRatioVol,
"OICall" = OICall,
"OIPut" = OIPut,
"PutToCallRatioOI" = PutToCallRatioOI,
"CallOutOfTheMoney" = CallOutOfTheMoney,
"PutOutOfTheMoney" = PutOutOfTheMoney)
return(theList)
}
# After running OptionChain function run this to get call spread with break @ the money
callSpread <- function(theOptionList){
print(theOptionList$CallInTheMoney)
print("------------------------------------------------------------")
print(theOptionList$CallOutOfTheMoney)
}
# After running OptionChain function run this to get put spread with break @ the money
putSpread <- function(theOptionList){
print(theOptionList$PutOutOfTheMoney)
print("------------------------------------------------------------")
print(theOptionList$PutInTheMoney)
}
theOptions <- OptionChain(T)
theOptions$theOptionChain
theOptions <- OptionChain(T, period=2)
theOptions <- OptionChain(T, thePeriod=2)
x11()
chartSeries(T)
addBBands()
addMACD()
addRSI()
addExpiry()
callSpread(theOptions)
theOptions$PutToCallRatioOI
putSpread(theOptions)
theOptions$PutToCallRatioVol
theOptions$PutToCallRatioOI
theOptions <- OptionChain(VTI)
x11()
chartSeries(VTI)
addBBands()
addMACD()
addRSI()
addExpiry()
theOptions$PutToCallRatioVol
theOptions$PutToCallRatioOI
theOptions$theOptionChain
callSpread(theOptions)
putSpread(theOptions)
theOptions$PutToCallRatioVol
theOptions$PutToCallRatioOI
callSpread(theOptions)
theOptions$PutToCallRatioVol
theOptions$PutToCallRatioOI
clear
theOptions <- optionsChain(T)
theOptions <- OptionChain(T)
x11()
chartSeries(T)
addBBands()
addMACD()
addRSI()
addExpiry()
theOptions$theOptionChain
theOptions <- OptionChain(T, thePeriod=2)
theOptions$PutToCallRatioVol
theOptions$PutToCallRatioOI
callSpread(theOptions)
putSpread(theOptions)
getSymbols("MRAM", from=as.Date("18-01-01", format="%y-%m-%d"))
theOptions <- OptionChain(MRAM)
OptionChain(T)
OptionChain(MRAM)
getSymbols("SO", from=as.Date("18-01-01", format="%y-%m-%d"))
theOption <- OptionChain(SO)
theOption$theOptionChain
theOption <- OptionChain(SO, thePeriod=2)
ckear
clear
clear
theOption$PutToCallRatioVol
theOption$PutToCallRatioOI
chartSeries(SO)
addBBands()
addMACD()
addRSI()
addExpiry()
callSpread(theOption)
putSpread(SO)
putSpread(theOption)
theOption$PutToCallRatioVol
theOption$PutToCallRatioOI
getSymbols("VZ", from=as.Date("18-01-01", format="%y-%m-%d"))
theOptions <- OptionChain(VZ)
theOptions$theOptionChain
theOptions <- OptionChain(VZ, thePeriod=2)
theOption$PutToCallRatioVol
theOption$PutToCallRatioOI
chartSeries(VZ)
addBBands()
addMACD()
addRSI()
addExpiry()
# R Script to get financial data from yahoo and google APIs
# Libraries ---------------------------------------------------------------
require(quantmod)
# Get Stock Info ----------------------------------------------------------
getSymbols(c("VTI",
"T"), from=as.Date("18-01-01", format="%y-%m-%d"))
# Options Info ------------------------------------------------------------
# Turning it into a function
OptionChain <- function(stockTickerDF, thePeriod=1){
# get ticker name
stockTicker <- deparse(substitute(stockTickerDF))
# Getting historical options prices
HistoricalOptionPriceDF <- stockTickerDF[options.expiry(stockTickerDF),]
# Get All Option Chains
theOptionChain <- getOptionChain(stockTicker, "2018")
# Options Chain - Calls In the Money (NextOptions Expiry Date)
CallInTheMoney <- theOptionChain[[thePeriod]]$calls[theOptionChain[[thePeriod]]$calls$Strike <= getQuote(stockTicker)$Last,]
# Options Chain - Puts In The Money (NextOptions Expiry Date)
PutInTheMoney <- theOptionChain[[thePeriod]]$puts[theOptionChain[[thePeriod]]$puts$Strike >= getQuote(stockTicker)$Last,]
# Implementation of the Put/Call Ratio (Volume)
# Total vol sum of Call Option / Total vol sum of Put Option
# 1 = Neutral
# > 1 = Bearish
# < 1 = Bullish
VolPut <- sum(theOptionChain[[thePeriod]]$puts$Vol)
VolCall <- sum(theOptionChain[[thePeriod]]$calls$Vol)
PutToCallRatioVol <- VolPut/VolCall
# Implementation of the Put/Call Ratio (Open Interest)
# Total sum OI Call Option / Total sum OI Put Option
# 1 = Neutral
# > 1 = Bearish
# < 1 = Bullish
OIPut <- sum(theOptionChain[[thePeriod]]$puts$OI)
OICall <- sum(theOptionChain[[thePeriod]]$calls$OI)
PutToCallRatioOI <- OIPut/OICall
# Options Chain - Calls Out of the Money (NextOptions Expiry Date)
CallOutOfTheMoney <- theOptionChain[[thePeriod]]$calls[theOptionChain[[thePeriod]]$calls$Strike >= getQuote(stockTicker)$Last,]
# Options Chain - Puts Out of The Money (NextOptions Expiry Date)
PutOutOfTheMoney <- theOptionChain[[thePeriod]]$puts[theOptionChain[[thePeriod]]$puts$Strike <= getQuote(stockTicker)$Last,]
# Return the List
theList <- list("HistoricalOptionPriceDF" = HistoricalOptionPriceDF,
"theOptionChain" = theOptionChain,
"CallInTheMoney" = CallInTheMoney,
"PutInTheMoney" = PutInTheMoney,
"VolCall" = VolCall,
"VolPut" = VolPut,
"PutToCallRatioVol" = PutToCallRatioVol,
"OICall" = OICall,
"OIPut" = OIPut,
"PutToCallRatioOI" = PutToCallRatioOI,
"CallOutOfTheMoney" = CallOutOfTheMoney,
"PutOutOfTheMoney" = PutOutOfTheMoney)
return(theList)
}
# After running OptionChain function run this to get call spread with break @ the money
callSpread <- function(theOptionList){
print(theOptionList$CallInTheMoney)
print("------------------------------------------------------------")
print(theOptionList$CallOutOfTheMoney)
}
# After running OptionChain function run this to get put spread with break @ the money
putSpread <- function(theOptionList){
print(theOptionList$PutOutOfTheMoney)
print("------------------------------------------------------------")
print(theOptionList$PutInTheMoney)
}
# Chart Series ------------------------------------------------------------
x11()
chartSeries(VTI)
addBBands()
addMACD()
addRSI()
addExpiry()
theOption <- OptionChain(VTI)
theOption$theOptionChain
theOption$PutToCallRatioVol
theOption$PutToCallRatioOI
# R Script to get financial data from yahoo and google APIs
# Libraries ---------------------------------------------------------------
require(quantmod)
# Get Stock Info ----------------------------------------------------------
getSymbols(c("VTI",
"T"), from=as.Date("18-01-01", format="%y-%m-%d"))
# Options Info ------------------------------------------------------------
# Turning it into a function
OptionChain <- function(stockTickerDF, thePeriod=1){
# get ticker name
stockTicker <- deparse(substitute(stockTickerDF))
# Getting historical options prices
HistoricalOptionPriceDF <- stockTickerDF[options.expiry(stockTickerDF),]
# Get All Option Chains
theOptionChain <- getOptionChain(stockTicker, "2018")
# Options Chain - Calls In the Money (NextOptions Expiry Date)
CallInTheMoney <- theOptionChain[[thePeriod]]$calls[theOptionChain[[thePeriod]]$calls$Strike <= getQuote(stockTicker)$Last,]
# Options Chain - Puts In The Money (NextOptions Expiry Date)
PutInTheMoney <- theOptionChain[[thePeriod]]$puts[theOptionChain[[thePeriod]]$puts$Strike >= getQuote(stockTicker)$Last,]
# Implementation of the Put/Call Ratio (Volume)
# Total vol sum of Call Option / Total vol sum of Put Option
# 1 = Neutral
# > 1 = Bearish
# < 1 = Bullish
VolPut <- sum(theOptionChain[[thePeriod]]$puts$Vol)
VolCall <- sum(theOptionChain[[thePeriod]]$calls$Vol)
PutToCallRatioVol <- VolPut/VolCall
# Implementation of the Put/Call Ratio (Open Interest)
# Total sum OI Call Option / Total sum OI Put Option
# 1 = Neutral
# > 1 = Bearish
# < 1 = Bullish
OIPut <- sum(theOptionChain[[thePeriod]]$puts$OI)
OICall <- sum(theOptionChain[[thePeriod]]$calls$OI)
PutToCallRatioOI <- OIPut/OICall
# Options Chain - Calls Out of the Money (NextOptions Expiry Date)
CallOutOfTheMoney <- theOptionChain[[thePeriod]]$calls[theOptionChain[[thePeriod]]$calls$Strike >= getQuote(stockTicker)$Last,]
# Options Chain - Puts Out of The Money (NextOptions Expiry Date)
PutOutOfTheMoney <- theOptionChain[[thePeriod]]$puts[theOptionChain[[thePeriod]]$puts$Strike <= getQuote(stockTicker)$Last,]
# Return the List
theList <- list("HistoricalOptionPriceDF" = HistoricalOptionPriceDF,
"theOptionChain" = theOptionChain,
"CallInTheMoney" = CallInTheMoney,
"PutInTheMoney" = PutInTheMoney,
"VolCall" = VolCall,
"VolPut" = VolPut,
"PutToCallRatioVol" = PutToCallRatioVol,
"OICall" = OICall,
"OIPut" = OIPut,
"PutToCallRatioOI" = PutToCallRatioOI,
"CallOutOfTheMoney" = CallOutOfTheMoney,
"PutOutOfTheMoney" = PutOutOfTheMoney)
return(theList)
}
# After running OptionChain function run this to get call spread with break @ the money
callSpread <- function(theOptionList){
print(theOptionList$CallInTheMoney)
print("------------------------------------------------------------")
print(theOptionList$CallOutOfTheMoney)
}
# After running OptionChain function run this to get put spread with break @ the money
putSpread <- function(theOptionList){
print(theOptionList$PutOutOfTheMoney)
print("------------------------------------------------------------")
print(theOptionList$PutInTheMoney)
}
x11()
chartSeries(VTI)
addBBands()
addMACD()
addRSI()
addExpiry()
test <- OptionChain(VTI)
test$PutToCallRatioVol
test$PutToCallRatioOI
callSpread(test)
putSpread(VTI)
putSpread(test)
require(quantmod)
getSymbols("T")
x11()
chartSeries(T)
zoomChart(T)
zooom()
addBBands()
addMACD()
addRSI()
addExpiry()
getSymbols(VTI)
getSymbols("VTI")
chartSeries(VTI)
zoomChart(VTI, yrange = from=as.Date("18-01-01", format="%y-%m-%d"))
zoomChart(VTI, from=as.Date("18-01-01", format="%y-%m-%d"))
zooom()
zooom()
zooom()
addBBands()
addMACD()
addRSI()
addExpiry()
require(quantmod)
getSymbols("VTI")
x11()
chartSeries(VTI)
getSymbols(c("VTI",
"T"), from=as.Date("18-01-01", format="%y-%m-%d"))
chartSeries(VTI)
addBBands()
addMACD()
addRSI()
allReturns(VTI)
test <- allReturns(VTI)
View(`T`)
View(test)
View(VTI)
# R Script to get financial data from yahoo and google APIs
# Libraries ---------------------------------------------------------------
require(quantmod)
# Get Stock Info ----------------------------------------------------------
getSymbols(c("VTI",
"T"), from=as.Date("18-01-01", format="%y-%m-%d"))
x11()
chartSeries(VTI)
addBBands()
addMACD()
addRSI()
?quantmod
allReturns(VTI)
test <- allReturns(VTI)
View(test)
View(VTI)
x11()
chartSeries(T)
addBBands()
addMACD()
addRSI()
require(quantmod)
getSymbols(c("VTI",
"T"), from=as.Date("18-01-01", format="%y-%m-%d"))
View(VTI)
View(`T`)
?quantmod
View(VTI)
BBands(VTI.Adjusted)
BBands(VTI$VTI.Adjusted)
require(neuralnet)
BBands(VTI)
BBands(VTI$VTI.Adjusted)
x11()
chartSeries(VTI)
addBBands()
VTI$VTI.PercentBB <- BBands(VTI$VTI.Close)
RSI(VTI$VTI.Close)
MACD(VTI$VTI.Close)
install.packages(c("backports", "BH", "bindr", "bindrcpp", "broom", "caret", "caTools", "cli", "cluster", "curl", "CVST", "data.table", "ddalpha", "DiagrammeR", "digest", "dimRed", "doParallel", "dplyr", "e1071", "evaluate", "foreign", "gbm", "ggplot2", "glue", "highr", "hms", "htmlwidgets", "httr", "igraph", "ipred", "iterators", "jsonlite", "kernlab", "knitr", "lattice", "lava", "lubridate", "markdown", "MASS", "Matrix", "mgcv", "mime", "ModelMetrics", "munsell", "nlme", "PerformanceAnalytics", "pillar", "pkgconfig", "plogr", "prodlim", "psych", "purrr", "quantmod", "R6", "Rcpp", "RcppRoll", "RCurl", "readr", "recipes", "rlang", "rmarkdown", "robustbase", "rpart", "rpart.plot", "rstudioapi", "scales", "selectr", "sfsmisc", "stringi", "stringr", "survival", "tidyr", "tidyselect", "timeDate", "TTR", "utf8", "viridis", "visNetwork", "withr", "xgboost", "XML", "xts", "yaml", "zoo"))
source('~/workspace/Fchang012/NerualNet_Exploration/Main_NeuralNet.R')
source('~/workspace/Fchang012/NerualNet_Exploration/Main_NeuralNet.R')
?predict
preduct(trainset[1,1:12], nn)
predict(trainset[1,1:12], nn)
?compute
