# Options Info ------------------------------------------------------------
# Turning it into a function
OptionChain <- function(stockTickerDF, thePeriod=1){
# get ticker name
stockTicker <- deparse(substitute(stockTickerDF))
# Getting historical options prices
HistoricalOptionPriceDF <- stockTickerDF[options.expiry(stockTickerDF),]
# Get All Option Chains
theOptionChain <- getOptionChain(stockTicker, "2018")
# Options Chain - Calls In the Money (NextOptions Expiry Date)
CallInTheMoney <- theOptionChain[[thePeriod]]$calls[theOptionChain[[thePeriod]]$calls$Strike <= getQuote(stockTicker)$Last,]
# Options Chain - Puts In The Money (NextOptions Expiry Date)
PutInTheMoney <- theOptionChain[[thePeriod]]$puts[theOptionChain[[thePeriod]]$puts$Strike >= getQuote(stockTicker)$Last,]
# Implementation of the Put/Call Ratio (Volume)
# Total vol sum of Call Option / Total vol sum of Put Option
# 1 = Neutral
# > 1 = Bearish
# < 1 = Bullish
VolPut <- sum(theOptionChain[[thePeriod]]$puts$Vol)
VolCall <- sum(theOptionChain[[thePeriod]]$calls$Vol)
PutToCallRatioVol <- VolPut/VolCall
# Implementation of the Put/Call Ratio (Open Interest)
# Total sum OI Call Option / Total sum OI Put Option
# 1 = Neutral
# > 1 = Bearish
# < 1 = Bullish
OIPut <- sum(theOptionChain[[thePeriod]]$puts$OI)
OICall <- sum(theOptionChain[[thePeriod]]$calls$OI)
PutToCallRatioOI <- OIPut/OICall
# Options Chain - Calls Out of the Money (NextOptions Expiry Date)
CallOutOfTheMoney <- theOptionChain[[thePeriod]]$calls[theOptionChain[[thePeriod]]$calls$Strike >= getQuote(stockTicker)$Last,]
# Options Chain - Puts Out of The Money (NextOptions Expiry Date)
PutOutOfTheMoney <- theOptionChain[[thePeriod]]$puts[theOptionChain[[thePeriod]]$puts$Strike <= getQuote(stockTicker)$Last,]
# Return the List
theList <- list("HistoricalOptionPriceDF" = HistoricalOptionPriceDF,
"theOptionChain" = theOptionChain,
"CallInTheMoney" = CallInTheMoney,
"PutInTheMoney" = PutInTheMoney,
"VolCall" = VolCall,
"VolPut" = VolPut,
"PutToCallRatioVol" = PutToCallRatioVol,
"OICall" = OICall,
"OIPut" = OIPut,
"PutToCallRatioOI" = PutToCallRatioOI,
"CallOutOfTheMoney" = CallOutOfTheMoney,
"PutOutOfTheMoney" = PutOutOfTheMoney)
return(theList)
}
# After running OptionChain function run this to get call spread with break @ the money
callSpread <- function(theOptionList){
print(theOptionList$CallInTheMoney)
print("------------------------------------------------------------")
print(theOptionList$CallOutOfTheMoney)
}
# After running OptionChain function run this to get put spread with break @ the money
putSpread <- function(theOptionList){
print(theOptionList$PutOutOfTheMoney)
print("------------------------------------------------------------")
print(theOptionList$PutInTheMoney)
}
# Chart Series ------------------------------------------------------------
x11()
chartSeries(VTI)
addBBands()
addMACD()
addRSI()
addExpiry()
theOption <- OptionChain(VTI)
theOption$theOptionChain
theOption$PutToCallRatioVol
theOption$PutToCallRatioOI
# R Script to get financial data from yahoo and google APIs
# Libraries ---------------------------------------------------------------
require(quantmod)
# Get Stock Info ----------------------------------------------------------
getSymbols(c("VTI",
"T"), from=as.Date("18-01-01", format="%y-%m-%d"))
# Options Info ------------------------------------------------------------
# Turning it into a function
OptionChain <- function(stockTickerDF, thePeriod=1){
# get ticker name
stockTicker <- deparse(substitute(stockTickerDF))
# Getting historical options prices
HistoricalOptionPriceDF <- stockTickerDF[options.expiry(stockTickerDF),]
# Get All Option Chains
theOptionChain <- getOptionChain(stockTicker, "2018")
# Options Chain - Calls In the Money (NextOptions Expiry Date)
CallInTheMoney <- theOptionChain[[thePeriod]]$calls[theOptionChain[[thePeriod]]$calls$Strike <= getQuote(stockTicker)$Last,]
# Options Chain - Puts In The Money (NextOptions Expiry Date)
PutInTheMoney <- theOptionChain[[thePeriod]]$puts[theOptionChain[[thePeriod]]$puts$Strike >= getQuote(stockTicker)$Last,]
# Implementation of the Put/Call Ratio (Volume)
# Total vol sum of Call Option / Total vol sum of Put Option
# 1 = Neutral
# > 1 = Bearish
# < 1 = Bullish
VolPut <- sum(theOptionChain[[thePeriod]]$puts$Vol)
VolCall <- sum(theOptionChain[[thePeriod]]$calls$Vol)
PutToCallRatioVol <- VolPut/VolCall
# Implementation of the Put/Call Ratio (Open Interest)
# Total sum OI Call Option / Total sum OI Put Option
# 1 = Neutral
# > 1 = Bearish
# < 1 = Bullish
OIPut <- sum(theOptionChain[[thePeriod]]$puts$OI)
OICall <- sum(theOptionChain[[thePeriod]]$calls$OI)
PutToCallRatioOI <- OIPut/OICall
# Options Chain - Calls Out of the Money (NextOptions Expiry Date)
CallOutOfTheMoney <- theOptionChain[[thePeriod]]$calls[theOptionChain[[thePeriod]]$calls$Strike >= getQuote(stockTicker)$Last,]
# Options Chain - Puts Out of The Money (NextOptions Expiry Date)
PutOutOfTheMoney <- theOptionChain[[thePeriod]]$puts[theOptionChain[[thePeriod]]$puts$Strike <= getQuote(stockTicker)$Last,]
# Return the List
theList <- list("HistoricalOptionPriceDF" = HistoricalOptionPriceDF,
"theOptionChain" = theOptionChain,
"CallInTheMoney" = CallInTheMoney,
"PutInTheMoney" = PutInTheMoney,
"VolCall" = VolCall,
"VolPut" = VolPut,
"PutToCallRatioVol" = PutToCallRatioVol,
"OICall" = OICall,
"OIPut" = OIPut,
"PutToCallRatioOI" = PutToCallRatioOI,
"CallOutOfTheMoney" = CallOutOfTheMoney,
"PutOutOfTheMoney" = PutOutOfTheMoney)
return(theList)
}
# After running OptionChain function run this to get call spread with break @ the money
callSpread <- function(theOptionList){
print(theOptionList$CallInTheMoney)
print("------------------------------------------------------------")
print(theOptionList$CallOutOfTheMoney)
}
# After running OptionChain function run this to get put spread with break @ the money
putSpread <- function(theOptionList){
print(theOptionList$PutOutOfTheMoney)
print("------------------------------------------------------------")
print(theOptionList$PutInTheMoney)
}
x11()
chartSeries(VTI)
addBBands()
addMACD()
addRSI()
addExpiry()
test <- OptionChain(VTI)
test$PutToCallRatioVol
test$PutToCallRatioOI
callSpread(test)
putSpread(VTI)
putSpread(test)
require(quantmod)
getSymbols("T")
x11()
chartSeries(T)
zoomChart(T)
zooom()
addBBands()
addMACD()
addRSI()
addExpiry()
getSymbols(VTI)
getSymbols("VTI")
chartSeries(VTI)
zoomChart(VTI, yrange = from=as.Date("18-01-01", format="%y-%m-%d"))
zoomChart(VTI, from=as.Date("18-01-01", format="%y-%m-%d"))
zooom()
zooom()
zooom()
addBBands()
addMACD()
addRSI()
addExpiry()
require(quantmod)
getSymbols("VTI")
x11()
chartSeries(VTI)
getSymbols(c("VTI",
"T"), from=as.Date("18-01-01", format="%y-%m-%d"))
chartSeries(VTI)
addBBands()
addMACD()
addRSI()
allReturns(VTI)
test <- allReturns(VTI)
View(`T`)
View(test)
View(VTI)
# R Script to get financial data from yahoo and google APIs
# Libraries ---------------------------------------------------------------
require(quantmod)
# Get Stock Info ----------------------------------------------------------
getSymbols(c("VTI",
"T"), from=as.Date("18-01-01", format="%y-%m-%d"))
x11()
chartSeries(VTI)
addBBands()
addMACD()
addRSI()
?quantmod
allReturns(VTI)
test <- allReturns(VTI)
View(test)
View(VTI)
x11()
chartSeries(T)
addBBands()
addMACD()
addRSI()
require(quantmod)
getSymbols(c("VTI",
"T"), from=as.Date("18-01-01", format="%y-%m-%d"))
View(VTI)
View(`T`)
?quantmod
View(VTI)
BBands(VTI.Adjusted)
BBands(VTI$VTI.Adjusted)
require(neuralnet)
BBands(VTI)
BBands(VTI$VTI.Adjusted)
x11()
chartSeries(VTI)
addBBands()
VTI$VTI.PercentBB <- BBands(VTI$VTI.Close)
RSI(VTI$VTI.Close)
MACD(VTI$VTI.Close)
install.packages(c("backports", "BH", "bindr", "bindrcpp", "broom", "caret", "caTools", "cli", "cluster", "curl", "CVST", "data.table", "ddalpha", "DiagrammeR", "digest", "dimRed", "doParallel", "dplyr", "e1071", "evaluate", "foreign", "gbm", "ggplot2", "glue", "highr", "hms", "htmlwidgets", "httr", "igraph", "ipred", "iterators", "jsonlite", "kernlab", "knitr", "lattice", "lava", "lubridate", "markdown", "MASS", "Matrix", "mgcv", "mime", "ModelMetrics", "munsell", "nlme", "PerformanceAnalytics", "pillar", "pkgconfig", "plogr", "prodlim", "psych", "purrr", "quantmod", "R6", "Rcpp", "RcppRoll", "RCurl", "readr", "recipes", "rlang", "rmarkdown", "robustbase", "rpart", "rpart.plot", "rstudioapi", "scales", "selectr", "sfsmisc", "stringi", "stringr", "survival", "tidyr", "tidyselect", "timeDate", "TTR", "utf8", "viridis", "visNetwork", "withr", "xgboost", "XML", "xts", "yaml", "zoo"))
require(NeralNet)
require(quantmod)
# R Script to get financial data from yahoo
# Libraries ---------------------------------------------------------------
require(quantmod)
# Setting WD --------------------------------------------------------------
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
source('~/workspace/Fchang012/NerualNet_Exploration/Stock_Data/Download_Stocks.R')
source('~/workspace/Fchang012/NerualNet_Exploration/Stock_Data/Download_Stocks.R')
View(VTI)
source('~/workspace/Fchang012/NerualNet_Exploration/Stock_Data/Download_Stocks.R')
length(wantedStocks)
wantedStocks[1]
wantedStocks[[1]]
paste(wantedStocks[[1]])
VTI
wantedStocks[1]
wantedStocks.append("T")
list.append(wantedStocks, "T")
theList <- c()
require(quantmod)
listOfXTS <- function(wantedStocks){
theXTSList <- c()
for (i in 1:length(wantedStocks)){
theXTSList <- c(theXTSList,
getSymbols(wantedStocks[[i]], from=as.Date("07-01-01", format="%y-%m-%d"))
)
return(theXTSList)
}
}
wantedStocks <- c("VTI")
listOfXTS(wantedStocks)
wantedStocks <- c("VTI","T")
listOfXTS(wantedStocks)
test <- listOfXTS(wantedStocks)
length(wantedStocks)
wantedStocks[[1]]
wantedStocks[[2]]
debugSource('~/workspace/Fchang012/NerualNet_Exploration/Stock_Data/Download_Stocks.R')
debugSource('~/workspace/Fchang012/NerualNet_Exploration/Stock_Data/Download_Stocks.R')
listOfXTS(wantedStocks)
listOfXTS(wantedStocks)
wantedStocks <- c("VTI","T")
test <- listOfXTS(wantedStocks)
length(wantedStocks)
# R Script to get financial data from yahoo
# Libraries ---------------------------------------------------------------
require(quantmod)
# Setting WD --------------------------------------------------------------
# this.dir <- dirname(parent.frame(2)$ofile)
# setwd(this.dir)
# Get Stock Info ----------------------------------------------------------
# Functions
listOfXTS <- function(wantedStocks){
theXTSList <- c()
for (i in 1:length(wantedStocks)){
theXTSList <- c(theXTSList,
getSymbols(wantedStocks[[i]], from=as.Date("07-01-01", format="%y-%m-%d"))
)
}
return(theXTSList)
}
# # Set the stocks
# wantedStocks <- c("VTI")
# getSymbols(wantedStocks, from=as.Date("07-01-01", format="%y-%m-%d"))
#
#
# # Write File --------------------------------------------------------------
# writeData <- function(wantedStock){
#
#   write.zoo(wantedStock, file =)
# }
wantedStocks <- c("VTI", "T")
test <- listOfXTS(wantedStocks)
test[[1]]
wantedStocks[[1]]
i=1
getSymbols(wantedStocks[[i]], from=as.Date("07-01-01", format="%y-%m-%d"))
test[[1]]
listOfXTS <- function(wantedStocks){
theXTSList <- c()
for (i in 1:length(wantedStocks)){
theXTSList[[i]] <- getSymbols(wantedStocks[[i]], from=as.Date("07-01-01", format="%y-%m-%d"))
}
return(theXTSList)
}
wantedStocks <- c("VTI", "T")
test <- listOfXTS(wantedStocks)
wantedStocks <- c("VTI",
"T")
wantedStocks[1]
paste(wantedStocks[1])
paste(wantedStocks[1],".csv")
paste(wantedStocks[1],".csv", sep = "")
getSymbols("VTI")
write.zoo(VTI)
write.zoo(VTI, file = "test.csv")
write.zoo(VTI, file = "test.txt")
wantedStocks <- c("VTI",
"T")
for (i in 1:length(wantedStocks)){
write.zoo(
getSymbols(wantedStocks[i], from=as.Date("18-01-01", format="%y-%m-%d")),
file = paste(wantedStocks[i], ".txt", sep="")
)
}
i=1
getSymbols(wantedStocks[i], from=as.Date("18-01-01", format="%y-%m-%d"))
?get
wantedStocks <- c("VTI",
"T")
getSymbols(wantedStocks[i], from=as.Date("18-01-01", format="%y-%m-%d"))
write.zoo(
get(wantedStocks[i]),
file = paste(wantedStocks[i], ".txt", sep="")
)
}
for (i in 1:length(wantedStocks)){
getSymbols(wantedStocks[i], from=as.Date("18-01-01", format="%y-%m-%d"))
write.zoo(
get(wantedStocks[i]),
file = paste(wantedStocks[i], ".txt", sep="")
)
}
wantedStocks <- c("VTI",
"T")
for (i in 1:length(wantedStocks)){
getSymbols(wantedStocks[i], from=as.Date("18-01-01", format="%y-%m-%d"))
safeRDS(
get(wantedStocks[i]),
file = paste(wantedStocks[i], ".txt", sep="")
)
}
for (i in 1:length(wantedStocks)){
getSymbols(wantedStocks[i], from=as.Date("18-01-01", format="%y-%m-%d"))
saveRDS(
get(wantedStocks[i]),
file = paste(wantedStocks[i], ".rds", sep="")
)
}
source('~/workspace/Fchang012/NerualNet_Exploration/Stock_Data/Download_Stocks.R')
source('~/workspace/Fchang012/NerualNet_Exploration/Main_NeuralNet.R')
list.files("\Stock_Data\")
list.files("/Stock_Data/")
list.files("./Stock_Data/")
list.files("./Stock_Data/", pattern = ".rds$")
length(list.files("./Stock_Data/", pattern = ".rds$"))
for (i in 1:length(list.files("./Stock_Data/", pattern = ".rds$"))){
readRDS(list.files("./Stock_Data/", pattern = ".rds$")[i])
}
list.files("./Stock_Data/", pattern = ".rds$")[i]
for (i in 1:length(list.files("./Stock_Data/", pattern = ".rds$"))){
inputFileString <- paste("./Stock_Data/", list.files("./Stock_Data/", pattern = ".rds$")[i], sep = "")
readRDS(inputFileString)
}
readRDS(inputFileString)
?set
?get
list.files("./Stock_Data/", pattern = ".rds$")[i]
?split
split(list.files("./Stock_Data/", pattern = ".rds$")[i], sep = ".")
strsplit(list.files("./Stock_Data/", pattern = ".rds$")[i], sep = ".")
strsplit(list.files("./Stock_Data/", pattern = ".rds$")[i], ".")
list.files("./Stock_Data/", pattern = ".rds$")[i]
list.files("./Stock_Data/", pattern = ".rds$")[[i]]
strSplit(list.files("./Stock_Data/", pattern = ".rds$")[[i]], ".")
strsplit(list.files("./Stock_Data/", pattern = ".rds$")[[i]], ".")
list.files("./Stock_Data/", pattern = ".rds$")[i]
unlist(list.files("./Stock_Data/", pattern = ".rds$")[i])
unlist(strsplit(list.files("./Stock_Data/", pattern = ".rds$")[i], "."))
typeof(list.files("./Stock_Data/", pattern = ".rds$")[i])
list.files("./Stock_Data/", pattern = ".rds$")[i]
names(list.files("./Stock_Data/", pattern = ".rds$")[i])
as.character(list.files("./Stock_Data/", pattern = ".rds$")[i])
strsplit(as.character(list.files("./Stock_Data/", pattern = ".rds$")[i]), ".")
strsplit(list.files("./Stock_Data/", pattern = ".rds$")[i], "r")
strsplit(list.files("./Stock_Data/", pattern = ".rds$")[i], "\\.")
strsplit(list.files("./Stock_Data/", pattern = ".rds$")[i], "\\.")[1]
unlist(strsplit(list.files("./Stock_Data/", pattern = ".rds$")[i], "\\."))
unlist(strsplit(list.files("./Stock_Data/", pattern = ".rds$")[i], "\\."))[1]
strsplit(list.files("./Stock_Data/", pattern = ".rds$")[i], "\\.")[1]
?assign
unlist(strsplit(list.files("./Stock_Data/", pattern = ".rds$")[i], "\\."))[1]
readRDS(inputFileString)
assign(unlist(strsplit(list.files("./Stock_Data/", pattern = ".rds$")[i], "\\."))[1], readRDS(inputFileString))
View(VTI)
source('~/workspace/Fchang012/NerualNet_Exploration/Stock_Data/Download_Stocks.R')
source('~/workspace/Fchang012/NerualNet_Exploration/Main_NeuralNet.R')
source('~/workspace/Fchang012/NerualNet_Exploration/Stock_Data/Download_Stocks.R')
source('~/workspace/Fchang012/NerualNet_Exploration/Main_NeuralNet.R')
list.files("./Stock_Data/", pattern = ".rds$")
source('~/workspace/Fchang012/NerualNet_Exploration/Stock_Data/Download_Stocks.R')
source('~/workspace/Fchang012/NerualNet_Exploration/Main_NeuralNet.R')
source('~/workspace/Fchang012/NerualNet_Exploration/Main_NeuralNet.R')
source('~/workspace/Fchang012/NerualNet_Exploration/Stock_Data/Download_Stocks.R')
source('~/workspace/Fchang012/NerualNet_Exploration/Main_NeuralNet.R')
list.files("./Stock_Data/", pattern = ".rds$")
View(VTI)
RSI(VTI)
VTI
View(VTI)
test <- VTI
test <- RSI(VTI$VTI.Close)
View(test)
test <- RSI(VTI$VTI.Close)
View(test)
View(VTI)
test <- VTI
View(test)
test$RSI <- RSI(test$VTI.Close)
View(test)
test$BBand <- BBands(test$VTI.Close)
View(test)
View(test)
test$MACD <- MACD(test$VTI.Close)
View(test)
test <- MACD(test$VTI.Close)
View(test)
test <- RSI(VTI$VTI.Close)
View(test)
test <- BBand(VTI$VTI.Close)
test <- BBands(VTI$VTI.Close)
View(test)
test <- MACD(VTI$VTI.Close)
View(test)
addTechnicalIndicators <- function(stockInfo){
stockInfo$rsi <- RSI(stockInfo$stockInfo.Close)
stockInfo$pctB <- BBands(stockInfo$stockInfo.Close)
stockInfo$signal <- MACD(stockInfo$stockInfo.Close)
return(stockInfo)
}
for (i in 1:length(list.files("./Stock_Data/", pattern = ".rds$"))){
inputFileString <- paste("./Stock_Data/", list.files("./Stock_Data/", pattern = ".rds$")[i], sep = "")
assign(unlist(strsplit(list.files("./Stock_Data/", pattern = ".rds$")[i], "\\."))[1], readRDS(inputFileString))
}
test <- addTechnicalIndicators
test <- addTechnicalIndicators(VTI)
Setting Up Data With Technical Indicators -------------------------------
addTechnicalIndicators <- function(stockInfo){
stockInfo$rsi <- RSI(stockInfo$stockInfo.Close)
stockInfo$pctB <- BBands(stockInfo$stockInfo.Close)
stockInfo$signal <- MACD(stockInfo$stockInfo.Close)
return(stockInfo)
}
test <- addTechnicalIndicators(VTI)
View(VTI)
debugSource('~/workspace/Fchang012/NerualNet_Exploration/Main_NeuralNet.R')
debugSource('~/workspace/Fchang012/NerualNet_Exploration/Main_NeuralNet.R')
addTechnicalIndicators(VTI)
addTechnicalIndicators(VTI)
stockInfo$VTI.Close
View(VTI)
colnames(VTI)
colnames(VTI)[4]
VTI$colnames(VTI)[4]
VTI$colnames(VTI)[[4]]
VTI[,4]
colnames(VTI)
addTechnicalIndicators <- function(stockInfo){
stockInfo$rsi <- RSI(stockInfo[,4])
stockInfo$pctB <- BBands(stockInfo[,4])
stockInfo$signal <- MACD(stockInfo[,4])
return(stockInfo)
}
test <- addTechnicalIndicators(VTI)
View(test)
test <- VTI[,4]
View(test)
for (i in 1:length(list.files("./Stock_Data/", pattern = ".rds$"))){
inputFileString <- paste("./Stock_Data/", list.files("./Stock_Data/", pattern = ".rds$")[i], sep = "")
assign(unlist(strsplit(list.files("./Stock_Data/", pattern = ".rds$")[i], "\\."))[1], readRDS(inputFileString))
}
# Setting Up Data With Technical Indicators -------------------------------
addTechnicalIndicators <- function(stockInfo){
stockInfo$rsi <- RSI(stockInfo[,4])
stockInfo$pctB <- BBands(stockInfo[,4])
stockInfo$signal <- MACD(stockInfo[,4])
return(stockInfo)
}
VTI <- addTechnicalIndicators(VTI)
View(VTI)
View(VTI)
dailyReturn(VTI)
test <- dailyReturn(VTI)
View(test)
